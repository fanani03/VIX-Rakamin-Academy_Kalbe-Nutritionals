# -*- coding: utf-8 -*-
"""W4- Arima Model 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10eGBpjr2QEJDIUptXy6dD8G3nunvGAxF

# Machine Learning Project
## Kalbe Nutritionals Data Scientist Virtual Internship Rakamin

Time Series Forecasting Using ARIMA Model

by : Ahmad Fanani
"""

import pandas as pd
import numpy as np
# from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('/content/drive/MyDrive/KULIAH/Pribadi/VIX Rakamin/W4/Case Study - Transaction.csv', delimiter=';')

# Convert 'Date' column to datetime data type
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
df

# New data
regression_data = df.groupby('Date')['Qty'].sum().reset_index()

msk = (regression_data.index < len(regression_data)-60)
regression_data_train = regression_data[msk].copy()
regression_data_test = regression_data[~msk].copy()

regression_data_test.shape

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

acf_original = plot_acf(regression_data_train['Qty'])

pacf_original = plot_pacf(regression_data_train['Qty'])

#ADF Test

from statsmodels.tsa.stattools import adfuller
adf_test = adfuller(regression_data_train['Qty'])
print(f'p-value: {adf_test[1]}')

"""## Transform to stationary: differencing"""

regression_data_train_diff = regression_data_train['Qty'].diff().dropna()
regression_data_train_diff.plot()

acf_diff = plot_acf(regression_data_train_diff)

pacf_diff = plot_pacf(regression_data_train_diff)

adf_test = adfuller(regression_data_train_diff)
print(f'p-value: {adf_test[1]}')

"""## ARIMA model"""

from statsmodels.tsa.arima.model import ARIMA
model = ARIMA(regression_data_train['Qty'], order=(100,1,0))
model_fit = model.fit()
print(model_fit.summary())

"""## Prediction"""

import matplotlib.pyplot as plt
residuals = model_fit.resid[1:]
fig, ax = plt.subplots(1,2)
residuals.plot(title='Residuals', ax=ax[0])
residuals.plot(title='Density', kind='kde', ax=ax[1])
plt.show()

acf_res = plot_acf(residuals)

pacf_res = plot_pacf(residuals)

forecast_test = model_fit.forecast(len(regression_data_test))

regression_data['forecast_manual'] = [None]*len(regression_data_train) + list(forecast_test)

kolom_tertentu = ['Qty', 'forecast_manual']

regression_data[kolom_tertentu].plot()